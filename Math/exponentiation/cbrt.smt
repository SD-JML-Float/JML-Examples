(set-option :produce-models true)
(set-logic ALL)
(set-option :AUTO_CONFIG false)
(set-option :smt.MBQI false)
(declare-sort REF 0)
(declare-fun NULL () REF)
(declare-fun stringConcat (REF REF ) REF)
(declare-fun stringLength (REF ) Int)
(declare-fun __JMLlength () (Array REF Int))
(assert (forall ((o REF) ) (>= (select __JMLlength o) 0)))
(assert (forall ((s1 REF) (s2 REF) ) (distinct (stringConcat s1 s2) NULL)))
(declare-fun asIntArray (REF ) (Array Int Int))
(declare-fun asREFArray (REF ) (Array Int REF))
(declare-fun intValue (REF ) Int)
(declare-fun booleanValue (REF ) Bool)
(define-fun |#is_byte#| ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(define-fun |#is_short#| ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))
(define-fun |#is_char#| ((x Int)) Bool (and (<= 0 x) (<= x 65535)))
(define-fun |#is_int#| ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(define-fun |#is_long#| ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(define-fun |#big8#| () Int 256)
(define-fun |#big16#| () Int 65536)
(define-fun |#big32#| () Int 4294967296)
(define-fun |#big64#| () Int (* 4294967296 4294967296))
(define-fun |#max8#| () Int 127)
(define-fun |#min8#| () Int (- 128))
(define-fun |#max16#| () Int 32767)
(define-fun |#min16#| () Int (- 32768))
(define-fun |#max32#| () Int 2147483647)
(define-fun |#min32#| () Int (- 2147483648))
(define-fun |#max64#| () Int (- (* 2147483648 4294967296) 1))
(define-fun |#min64#| () Int (- (* 2147483648 4294967296)))
(define-fun |#isMul32ok#| ((x Int)(y Int)) Bool (let ((prod (* x y)) ) (and (<= |#min32#| prod) (<= prod |#max32#|))))
(define-fun |#isMul64ok#| ((x Int)(y Int)) Bool (let ((prod (* x y)) ) (and (<= |#min64#| prod) (<= prod |#max64#|))))
(define-fun |#trunc32s#| ((x Int)) Int (let ((m (mod x |#big32#|)) ) (ite (<= m |#max32#|) m (- m |#big32#|))))
(define-fun |#trunc16s#| ((x Int)) Int (let ((m (mod x |#big16#|)) ) (ite (<= m |#max16#|) m (- m |#big16#|))))
(define-fun |#trunc8s#| ((x Int)) Int (let ((m (mod x |#big8#|)) ) (ite (<= m |#max8#|) m (- m |#big8#|))))
(define-fun |#cdiv#| ((a Int)(b Int)) Int (ite (>= a 0) (div a b) (div (- a) (- b))))
(define-fun |#cmod#| ((a Int)(b Int)) Int (ite (>= a 0) (mod a b) (mod (- a) (- b))))
(define-fun |#inRange32#| ((a Int)) Bool (and (<= |#min32#| a) (<= a |#max32#|)))
(define-fun |#add32ok#| ((a Int)(b Int)) Bool (|#inRange32#| (+ a b)))
(define-fun |#add32#| ((a Int)(b Int)) Int (let ((p (+ a b)) ) (ite (|#inRange32#| p) p (ite (< |#max32#| p) (- p |#big32#|) (+ p |#big32#|)))))
(define-fun |#mul32ok#| ((a Int)(b Int)) Bool (|#inRange32#| (* a b)))
(define-fun |#mul32#| ((a Int)(b Int)) Int (let ((p (* a b)) ) (ite (|#inRange32#| p) p (+ (mod (- p |#min32#|) |#big32#|) |#min32#|))))
(define-fun |#inRange64#| ((a Int)) Bool (and (<= |#min64#| a) (<= a |#max64#|)))
(define-fun |#add64ok#| ((a Int)(b Int)) Bool (|#inRange64#| (+ a b)))
(define-fun |#add64#| ((a Int)(b Int)) Int (let ((p (+ a b)) ) (ite (|#inRange64#| p) p (ite (< |#max64#| p) (- p |#big64#|) (+ p |#big64#|)))))
(define-fun |#mul64ok#| ((a Int)(b Int)) Bool (|#inRange64#| (* a b)))
(define-fun |#mul64#| ((a Int)(b Int)) Int (let ((p (* a b)) ) (ite (|#inRange64#| p) p (+ (mod (- p |#min64#|) |#big64#|) |#min64#|))))
(declare-sort JMLTypeSort 0)
(declare-fun javaTypeOf (REF ) REF)
(declare-fun jmlTypeOf (REF ) JMLTypeSort)
(declare-fun typearg1_1 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg2_1 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg2_2 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg3_1 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg3_2 (JMLTypeSort ) JMLTypeSort)
(declare-fun typearg3_3 (JMLTypeSort ) JMLTypeSort)
(declare-fun javaSubType (REF REF ) Bool)
(declare-fun jmlSubType (JMLTypeSort JMLTypeSort ) Bool)
(declare-fun erasure (JMLTypeSort ) REF)
(declare-fun _JMLT_0 (REF ) JMLTypeSort)
(declare-fun _JMLT_1 (REF JMLTypeSort ) JMLTypeSort)
(declare-fun _JMLT_2 (REF JMLTypeSort JMLTypeSort ) JMLTypeSort)
(declare-fun _JMLT_3 (REF JMLTypeSort JMLTypeSort JMLTypeSort ) JMLTypeSort)
(assert (forall ((o REF) ) (= (erasure (jmlTypeOf o)) (javaTypeOf o))))
(declare-fun _makeArrayType (REF ) REF)
(declare-fun _isArrayType (REF ) Bool)
(declare-fun _makeJMLArrayType (JMLTypeSort ) JMLTypeSort)
(declare-fun _isJMLArrayType (JMLTypeSort ) Bool)
(declare-fun __arrayElemType (JMLTypeSort ) JMLTypeSort)
(assert (forall ((T JMLTypeSort) ) (= (erasure (_makeJMLArrayType T)) (_makeArrayType (erasure T)))))
(assert (forall ((T1 JMLTypeSort) (T2 JMLTypeSort) ) (=> (jmlSubType T1 T2) (javaSubType (erasure T1) (erasure T2)))))
(assert (forall ((T1 REF) (T2 REF) (T3 JMLTypeSort) ) (= (javaSubType T1 T2) (jmlSubType (_JMLT_1 T1 T3) (_JMLT_1 T2 T3)))))
(assert (forall ((T1 REF) (T2 REF) (T3 JMLTypeSort) (T4 JMLTypeSort) ) (=> (and (javaSubType T1 T2) (not (= T3 T4))) (not (jmlSubType (_JMLT_1 T1 T3) (_JMLT_1 T2 T4))))))
(assert (forall ((T1 REF) (T2 REF) (T3 JMLTypeSort) (T4 JMLTypeSort) ) (=> (jmlSubType (_JMLT_1 T1 T3) (_JMLT_1 T2 T4)) (and (javaSubType T1 T2) (= T3 T4)))))
(assert (forall ((T1 REF) (T2 REF) (T3 JMLTypeSort) (T4 JMLTypeSort) ) (=> (= (_JMLT_1 T1 T3) (_JMLT_1 T2 T4)) (and (= T1 T2) (= T3 T4)))))
(declare-fun nonnullelements (REF (Array REF (Array Int REF)) ) Bool)
(assert (forall ((a REF) (arrays (Array REF (Array Int REF))) ) (= (nonnullelements a arrays) (forall ((i Int) ) (=> (and (<= 0 i) (< i (select __JMLlength a))) (distinct NULL (select (select arrays a) i)))))))
(declare-fun T_java_lang_Object () REF)
(declare-fun JMLT_java_lang_Object () JMLTypeSort)
(declare-fun T_java_lang_Class () REF)
(declare-fun T_double () REF)
(declare-fun JMLT_double () JMLTypeSort)
(declare-fun T_java_lang_Exception () REF)
(declare-fun JMLT_java_lang_Exception () JMLTypeSort)
(declare-fun T_java_lang_RuntimeException () REF)
(declare-fun JMLT_java_lang_RuntimeException () JMLTypeSort)
(declare-fun T_java_lang_Double () REF)
(declare-fun JMLT_java_lang_Double () JMLTypeSort)
(assert (not (_isArrayType T_java_lang_Object)))
(assert (not (_isJMLArrayType JMLT_java_lang_Object)))
(assert (= (_JMLT_0 T_java_lang_Object) JMLT_java_lang_Object))
(assert (= (erasure JMLT_java_lang_Object) T_java_lang_Object))
(assert (not (_isArrayType T_java_lang_Class)))
(assert (forall ((t REF) ) (=> (javaSubType t T_java_lang_Class) (= t T_java_lang_Class))))
(assert (not (_isJMLArrayType (_JMLT_1 T_java_lang_Class JMLT_java_lang_Double))))
(assert (= (erasure (_JMLT_1 T_java_lang_Class JMLT_java_lang_Double)) T_java_lang_Class))
(assert (forall ((t JMLTypeSort) ) (=> (jmlSubType t (_JMLT_1 T_java_lang_Class JMLT_java_lang_Double)) (= t (_JMLT_1 T_java_lang_Class JMLT_java_lang_Double)))))
(assert (not (_isArrayType T_double)))
(assert (not (_isJMLArrayType JMLT_double)))
(assert (= (_JMLT_0 T_double) JMLT_double))
(assert (= (erasure JMLT_double) T_double))
(assert (not (_isArrayType T_java_lang_Exception)))
(assert (not (_isJMLArrayType JMLT_java_lang_Exception)))
(assert (= (_JMLT_0 T_java_lang_Exception) JMLT_java_lang_Exception))
(assert (= (erasure JMLT_java_lang_Exception) T_java_lang_Exception))
(assert (not (_isArrayType T_java_lang_RuntimeException)))
(assert (not (_isJMLArrayType JMLT_java_lang_RuntimeException)))
(assert (= (_JMLT_0 T_java_lang_RuntimeException) JMLT_java_lang_RuntimeException))
(assert (= (erasure JMLT_java_lang_RuntimeException) T_java_lang_RuntimeException))
(assert (not (_isArrayType T_java_lang_Double)))
(assert (forall ((t REF) ) (=> (javaSubType t T_java_lang_Double) (= t T_java_lang_Double))))
(assert (not (_isJMLArrayType JMLT_java_lang_Double)))
(assert (= (_JMLT_0 T_java_lang_Double) JMLT_java_lang_Double))
(assert (= (erasure JMLT_java_lang_Double) T_java_lang_Double))
(assert (forall ((t JMLTypeSort) ) (=> (jmlSubType t JMLT_java_lang_Double) (= t JMLT_java_lang_Double))))
(assert (distinct T_java_lang_Object T_java_lang_Class T_double T_java_lang_Exception T_java_lang_RuntimeException T_java_lang_Double))
(assert (distinct JMLT_java_lang_Object JMLT_double JMLT_java_lang_Exception JMLT_java_lang_RuntimeException JMLT_java_lang_Double))
(assert (javaSubType T_java_lang_Object T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_Object JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_Object T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Class))))
(assert (not (javaSubType T_java_lang_Object T_double)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_double))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_double)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_double))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_java_lang_Object)) (not (javaSubType (javaTypeOf e) T_double)))))
(assert (not (javaSubType T_java_lang_Object T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (forall ((e REF) ) (=> (javaSubType (javaTypeOf e) T_java_lang_Exception) (javaSubType (javaTypeOf e) T_java_lang_Object))))
(assert (not (javaSubType T_java_lang_Object T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (forall ((e REF) ) (=> (javaSubType (javaTypeOf e) T_java_lang_RuntimeException) (javaSubType (javaTypeOf e) T_java_lang_Object))))
(assert (not (javaSubType T_java_lang_Object T_java_lang_Double)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Object) (_makeArrayType T_java_lang_Double))))
(assert (not (jmlSubType JMLT_java_lang_Object JMLT_java_lang_Double)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Object) (_makeJMLArrayType JMLT_java_lang_Double))))
(assert (forall ((e REF) ) (=> (javaSubType (javaTypeOf e) T_java_lang_Double) (javaSubType (javaTypeOf e) T_java_lang_Object))))
(assert (javaSubType T_java_lang_Class T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_Object)))
(assert (javaSubType T_java_lang_Class T_java_lang_Class))
(assert (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_Class)))
(assert (not (javaSubType T_java_lang_Class T_double)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_double))))
(assert (not (javaSubType T_java_lang_Class T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_Exception))))
(assert (not (javaSubType T_java_lang_Class T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (javaSubType T_java_lang_Class T_java_lang_Double)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Class) (_makeArrayType T_java_lang_Double))))
(assert (not (javaSubType T_double T_java_lang_Object)))
(assert (not (javaSubType (_makeArrayType T_double) (_makeArrayType T_java_lang_Object))))
(assert (not (jmlSubType JMLT_double JMLT_java_lang_Object)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_double) (_makeJMLArrayType JMLT_java_lang_Object))))
(assert (not (javaSubType T_double T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_double) (_makeArrayType T_java_lang_Class))))
(assert (javaSubType T_double T_double))
(assert (javaSubType (_makeArrayType T_double) (_makeArrayType T_double)))
(assert (jmlSubType JMLT_double JMLT_double))
(assert (jmlSubType (_makeJMLArrayType JMLT_double) (_makeJMLArrayType JMLT_double)))
(assert (not (javaSubType T_double T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_double) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_double JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_double) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_double)) (not (javaSubType (javaTypeOf e) T_java_lang_Exception)))))
(assert (not (javaSubType T_double T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_double) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_double JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_double) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_double)) (not (javaSubType (javaTypeOf e) T_java_lang_RuntimeException)))))
(assert (not (javaSubType T_double T_java_lang_Double)))
(assert (not (javaSubType (_makeArrayType T_double) (_makeArrayType T_java_lang_Double))))
(assert (not (jmlSubType JMLT_double JMLT_java_lang_Double)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_double) (_makeJMLArrayType JMLT_java_lang_Double))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_double)) (not (javaSubType (javaTypeOf e) T_java_lang_Double)))))
(assert (javaSubType T_java_lang_Exception T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_Exception T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Class))))
(assert (not (javaSubType T_java_lang_Exception T_double)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_double))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_double)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_double))))
(assert (javaSubType T_java_lang_Exception T_java_lang_Exception))
(assert (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Exception)))
(assert (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_Exception))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_Exception)))
(assert (not (javaSubType T_java_lang_Exception T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (forall ((e REF) ) (=> (javaSubType (javaTypeOf e) T_java_lang_RuntimeException) (javaSubType (javaTypeOf e) T_java_lang_Exception))))
(assert (not (javaSubType T_java_lang_Exception T_java_lang_Double)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Exception) (_makeArrayType T_java_lang_Double))))
(assert (not (jmlSubType JMLT_java_lang_Exception JMLT_java_lang_Double)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Exception) (_makeJMLArrayType JMLT_java_lang_Double))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_java_lang_Exception)) (not (javaSubType (javaTypeOf e) T_java_lang_Double)))))
(assert (javaSubType T_java_lang_RuntimeException T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_RuntimeException T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Class))))
(assert (not (javaSubType T_java_lang_RuntimeException T_double)))
(assert (not (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_double))))
(assert (not (jmlSubType JMLT_java_lang_RuntimeException JMLT_double)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_double))))
(assert (javaSubType T_java_lang_RuntimeException T_java_lang_Exception))
(assert (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Exception)))
(assert (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_Exception))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_Exception)))
(assert (javaSubType T_java_lang_RuntimeException T_java_lang_RuntimeException))
(assert (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_RuntimeException)))
(assert (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_RuntimeException))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_RuntimeException)))
(assert (not (javaSubType T_java_lang_RuntimeException T_java_lang_Double)))
(assert (not (javaSubType (_makeArrayType T_java_lang_RuntimeException) (_makeArrayType T_java_lang_Double))))
(assert (not (jmlSubType JMLT_java_lang_RuntimeException JMLT_java_lang_Double)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_RuntimeException) (_makeJMLArrayType JMLT_java_lang_Double))))
(assert (forall ((e REF) ) (or (not (javaSubType (javaTypeOf e) T_java_lang_RuntimeException)) (not (javaSubType (javaTypeOf e) T_java_lang_Double)))))
(assert (javaSubType T_java_lang_Double T_java_lang_Object))
(assert (javaSubType (_makeArrayType T_java_lang_Double) (_makeArrayType T_java_lang_Object)))
(assert (jmlSubType JMLT_java_lang_Double JMLT_java_lang_Object))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Double) (_makeJMLArrayType JMLT_java_lang_Object)))
(assert (not (javaSubType T_java_lang_Double T_java_lang_Class)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Double) (_makeArrayType T_java_lang_Class))))
(assert (not (javaSubType T_java_lang_Double T_double)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Double) (_makeArrayType T_double))))
(assert (not (jmlSubType JMLT_java_lang_Double JMLT_double)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Double) (_makeJMLArrayType JMLT_double))))
(assert (not (javaSubType T_java_lang_Double T_java_lang_Exception)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Double) (_makeArrayType T_java_lang_Exception))))
(assert (not (jmlSubType JMLT_java_lang_Double JMLT_java_lang_Exception)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Double) (_makeJMLArrayType JMLT_java_lang_Exception))))
(assert (not (javaSubType T_java_lang_Double T_java_lang_RuntimeException)))
(assert (not (javaSubType (_makeArrayType T_java_lang_Double) (_makeArrayType T_java_lang_RuntimeException))))
(assert (not (jmlSubType JMLT_java_lang_Double JMLT_java_lang_RuntimeException)))
(assert (not (jmlSubType (_makeJMLArrayType JMLT_java_lang_Double) (_makeJMLArrayType JMLT_java_lang_RuntimeException))))
(assert (javaSubType T_java_lang_Double T_java_lang_Double))
(assert (javaSubType (_makeArrayType T_java_lang_Double) (_makeArrayType T_java_lang_Double)))
(assert (jmlSubType JMLT_java_lang_Double JMLT_java_lang_Double))
(assert (jmlSubType (_makeJMLArrayType JMLT_java_lang_Double) (_makeJMLArrayType JMLT_java_lang_Double)))
(assert (forall ((t1 REF) (t2 REF) (t3 REF) ) (=> (and (javaSubType t1 t2) (javaSubType t2 t3)) (javaSubType t1 t3))))
(assert (forall ((t1 JMLTypeSort) (t2 JMLTypeSort) (t3 JMLTypeSort) ) (=> (and (jmlSubType t1 t2) (jmlSubType t2 t3)) (jmlSubType t1 t3))))
(assert (distinct T_java_lang_Object T_java_lang_Class T_double T_java_lang_Exception T_java_lang_RuntimeException T_java_lang_Double))
(assert (distinct (_JMLT_1 T_java_lang_Class JMLT_java_lang_Double) (_JMLT_0 T_java_lang_Exception) (_JMLT_0 T_java_lang_Object) (_JMLT_0 T_java_lang_RuntimeException) (_JMLT_0 T_double) (_JMLT_0 T_java_lang_Double)))
(declare-fun |java.lang.Double_TYPE| () REF)
(declare-fun realValue (REF ) Real)
(declare-fun |java.lang.Double_POSITIVE_INFINITY| () Real)
(declare-fun |java.lang.Double_NEGATIVE_INFINITY| () Real)
(declare-fun |a_0_0___2| () Real)
(declare-fun |`exception_82_82___3| () REF)
(declare-fun |`terminationPosition_82_82___4| () Int)
(declare-fun |a_98_98___5| () Real)
(declare-fun |ASSERT_35| () Bool)
(declare-fun |BL_0_afterIf_3_source| () Int)
(declare-fun |ASSERT_38| () Bool)
(declare-fun |BL_0_afterIf_6_source| () Int)
(declare-fun |`conditionalResult_17_4130_4130___6| () Bool)
(declare-fun |ASSERT_44| () Bool)
(declare-fun |BL_0_afterIf_12_source| () Int)
(declare-fun |`conditionalResult_21_4470_4470___7| () Bool)
(declare-fun |`conditionalResult_21_4470_0___8| () Bool)
(declare-fun |`conditionalResult_21_4470_4475___9| () Bool)
(declare-fun |BL_0_afterIf_15_source| () Int)
(declare-fun |`conditionalResult_17_4130_4133___10| () Bool)
(declare-fun |`conditionalResult_17_4130_0___11| () Bool)
(declare-fun |BL_0_afterIf_9_source| () Int)
(declare-fun |Pre_2_56_32___12| () Bool)
(declare-fun |ASSERT_56| () Bool)
(declare-fun |ASSERT_57| () Bool)
(declare-fun |BL_0_afterIf_26_source| () Int)
(declare-fun |ASSERT_69| () Bool)
(declare-fun |ASSERT_74| () Bool)
(declare-fun |`conditionalResult_50_9616_9616___13| () Bool)
(declare-fun |`conditionalResult_50_9616_9621___14| () Bool)
(declare-fun |`conditionalResult_50_9616_0___15| () Bool)
(declare-fun |BL_0_afterIf_29_source| () Int)
(declare-fun |ASSERT_81| () Bool)
(declare-fun |BL_0_afterIf_33_source| () Int)
(declare-fun |`exceptionCall_133_133___16| () REF)
(declare-fun |ASSERT_84| () Bool)
(declare-fun |BL_0_afterIf_39_source| () Int)
(declare-fun |BL_0_afterIf_36_source| () Int)
(declare-fun |BL_0_afterIf_42_source| () Int)
(declare-fun |BL_0_afterIf_45_source| () Int)
(declare-fun |ASSERT_99| () Bool)
(declare-fun |BL_0_afterIf_48_source| () Int)
(declare-fun |ASSERT_105| () Bool)
(declare-fun |BL_0_afterIf_51_source| () Int)
(declare-fun |ASSERT_111| () Bool)
(declare-fun |BL_0_afterIf_54_source| () Int)
(declare-fun |result_115_115___17| () Real)
(declare-fun |ASSERT_118| () Bool)
(declare-fun |BL_0_afterIf_57_source| () Int)
(declare-fun |ASSERT_121| () Bool)
(declare-fun |BL_0_afterIf_60_source| () Int)
(declare-fun |`conditionalResult_81_4130_4130___18| () Bool)
(declare-fun |ASSERT_127| () Bool)
(declare-fun |BL_0_afterIf_66_source| () Int)
(declare-fun |`conditionalResult_85_4470_4470___19| () Bool)
(declare-fun |`conditionalResult_85_4470_0___20| () Bool)
(declare-fun |`conditionalResult_85_4470_4475___21| () Bool)
(declare-fun |BL_0_afterIf_69_source| () Int)
(declare-fun |`conditionalResult_81_4130_4133___22| () Bool)
(declare-fun |`conditionalResult_81_4130_0___23| () Bool)
(declare-fun |BL_0_afterIf_63_source| () Int)
(declare-fun |ASSERT_136| () Bool)
(declare-fun |ASSERT_137| () Bool)
(declare-fun |ASSERT_138| () Bool)
(declare-fun |ASSERT_141| () Bool)
(declare-fun |ASSERT_142| () Bool)
(declare-fun |BL_82_finally_21_source| () Int)
(declare-fun |__JMLsavedException_82_82_82___24| () REF)
(declare-fun |__JMLsavedTermination_82_82_82___25| () Int)
(declare-fun |ASSERT_143| () Bool)
(declare-fun |ASSERT_144| () Bool)
(declare-fun |BL_0_afterIf_72_source| () Int)
(declare-fun |`exception_82_82___26| () REF)
(declare-fun |`terminationPosition_82_82___27| () Int)
(declare-fun |BL_82_AfterTry_19_source| () Int)
(declare-fun BL_82Start_1 () Bool)
(declare-fun BL_103bodyBegin_2 () Bool)
(declare-fun BL_0_then_4 () Bool)
(declare-fun BL_0_else_5 () Bool)
(declare-fun BL_0_afterIf_3 () Bool)
(declare-fun BL_0_then_7 () Bool)
(declare-fun BL_0_else_8 () Bool)
(declare-fun BL_0_afterIf_6 () Bool)
(declare-fun BL_0_then_10 () Bool)
(declare-fun BL_0_then_13 () Bool)
(declare-fun BL_0_else_14 () Bool)
(declare-fun BL_0_afterIf_12 () Bool)
(declare-fun BL_0_then_16 () Bool)
(declare-fun BL_0_else_17 () Bool)
(declare-fun BL_0_afterIf_15 () Bool)
(declare-fun BL_0_else_11 () Bool)
(declare-fun BL_0_afterIf_9 () Bool)
(declare-fun BL_82_AfterLabel_18 () Bool)
(declare-fun BL_0_then_27 () Bool)
(declare-fun BL_0_else_28 () Bool)
(declare-fun BL_0_afterIf_26 () Bool)
(declare-fun BL_0_then_30 () Bool)
(declare-fun BL_0_else_31 () Bool)
(declare-fun BL_0_afterIf_29 () Bool)
(declare-fun BL_133_AfterLabel_32 () Bool)
(declare-fun BL_0_then_34 () Bool)
(declare-fun BL_0_else_35 () Bool)
(declare-fun BL_0_afterIf_33 () Bool)
(declare-fun BL_0_then_37 () Bool)
(declare-fun BL_0_then_40 () Bool)
(declare-fun BL_0_else_41 () Bool)
(declare-fun BL_0_afterIf_39 () Bool)
(declare-fun BL_0_else_38 () Bool)
(declare-fun BL_0_afterIf_36 () Bool)
(declare-fun BL_0_then_43 () Bool)
(declare-fun BL_0_else_44 () Bool)
(declare-fun BL_0_afterIf_42 () Bool)
(declare-fun BL_0_then_46 () Bool)
(declare-fun BL_0_else_47 () Bool)
(declare-fun BL_0_afterIf_45 () Bool)
(declare-fun BL_0_then_49 () Bool)
(declare-fun BL_0_else_50 () Bool)
(declare-fun BL_0_afterIf_48 () Bool)
(declare-fun BL_0_then_52 () Bool)
(declare-fun BL_0_else_53 () Bool)
(declare-fun BL_0_afterIf_51 () Bool)
(declare-fun BL_0_then_55 () Bool)
(declare-fun BL_0_else_56 () Bool)
(declare-fun BL_0_afterIf_54 () Bool)
(declare-fun BL_0_then_58 () Bool)
(declare-fun BL_0_else_59 () Bool)
(declare-fun BL_0_afterIf_57 () Bool)
(declare-fun BL_0_then_61 () Bool)
(declare-fun BL_0_else_62 () Bool)
(declare-fun BL_0_afterIf_60 () Bool)
(declare-fun BL_0_then_64 () Bool)
(declare-fun BL_0_then_67 () Bool)
(declare-fun BL_0_else_68 () Bool)
(declare-fun BL_0_afterIf_66 () Bool)
(declare-fun BL_0_then_70 () Bool)
(declare-fun BL_0_else_71 () Bool)
(declare-fun BL_0_afterIf_69 () Bool)
(declare-fun BL_0_else_65 () Bool)
(declare-fun BL_0_afterIf_63 () Bool)
(declare-fun BL_82tryTarget_20 () Bool)
(declare-fun BL_82noException_22 () Bool)
(declare-fun BL_82nocatch_23 () Bool)
(declare-fun BL_82_finally_21 () Bool)
(declare-fun BL_0_then_73 () Bool)
(declare-fun BL_0_else_74 () Bool)
(declare-fun BL_0_afterIf_72 () Bool)
(declare-fun BL_82finallyNormal_24 () Bool)
(declare-fun BL_82finallyExit_25 () Bool)
(declare-fun BL_82_AfterTry_19 () Bool)
(assert (= BL_82Start_1 BL_103bodyBegin_2))
(declare-fun |__JML_AssumeCheck_| () Int)
(define-fun |_JML__tmp5| () Bool true)
(define-fun |_JML__tmp6| () REF |java.lang.Double_TYPE|)
(define-fun |_JML__tmp7| () Bool (= |java.lang.Double_TYPE| T_double))
(declare-fun |_JML__tmp8| () Bool)
(define-fun |_JML__tmp9| () Real |a_98_98___5|)
(declare-fun |_JML__tmp10| () Bool)
(define-fun |_$CPRE__2_1| () Bool true)
(define-fun |_$CPRE__2| () Bool true)
(define-fun BL_103bodyBegin_2__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_103bodyBegin_2__A2 () Bool (= |`terminationPosition_82_82___4| 0))
(declare-fun REALLIT_PINF () Real)
(define-fun BL_103bodyBegin_2__A3 () Bool (= |java.lang.Double_POSITIVE_INFINITY| REALLIT_PINF))
(declare-fun REALLIT_NINF () Real)
(define-fun BL_103bodyBegin_2__A4 () Bool (= |java.lang.Double_NEGATIVE_INFINITY| REALLIT_NINF))
(define-fun BL_103bodyBegin_2__A5 () Bool true)
(define-fun BL_103bodyBegin_2__A6 () Bool (distinct T_double NULL))
(define-fun BL_103bodyBegin_2__A7 () Bool |_JML__tmp7|)
(define-fun BL_103bodyBegin_2__A8 () Bool (= |ASSERT_35| |_$CPRE__2|))
(assert (= BL_103bodyBegin_2 (=> BL_103bodyBegin_2__A1 (=> BL_103bodyBegin_2__A2 (=> BL_103bodyBegin_2__A3 (=> BL_103bodyBegin_2__A4 (=> BL_103bodyBegin_2__A5 (=> BL_103bodyBegin_2__A6 (=> BL_103bodyBegin_2__A7 (=> BL_103bodyBegin_2__A8 (and |ASSERT_35| (=> |ASSERT_35| (and BL_0_then_4 BL_0_else_5)))))))))))))
(define-fun BL_0_then_4__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_4__A2 () Bool (= |BL_0_afterIf_3_source| 4))
(assert (= BL_0_then_4 (=> BL_0_then_4__A1 (=> BL_0_then_4__A2 BL_0_afterIf_3))))
(define-fun BL_0_else_5__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_5__A2 () Bool (= |BL_0_afterIf_3_source| 5))
(assert (= BL_0_else_5 (=> BL_0_else_5__A1 (=> BL_0_else_5__A2 BL_0_afterIf_3))))
(declare-fun |_JML__tmp11| () Bool)
(define-fun |_$CPRE__3_1| () Bool true)
(define-fun |_$CPRE__3| () Bool true)
(declare-fun java_lang_Double_isFinite_H2_4196 (Real ) Bool)
(define-fun BL_0_afterIf_3__A1 () Bool (= |_JML__tmp10| (java_lang_Double_isFinite_H2_4196 |_JML__tmp9|)))
(define-fun BL_0_afterIf_3__A2 () Bool (= |ASSERT_38| |_$CPRE__3|))
(assert (= BL_0_afterIf_3 (=> BL_0_afterIf_3__A1 (=> BL_0_afterIf_3__A2 (and |ASSERT_38| (=> |ASSERT_38| (and BL_0_then_7 BL_0_else_8)))))))
(define-fun BL_0_then_7__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_7__A2 () Bool (= |BL_0_afterIf_6_source| 7))
(assert (= BL_0_then_7 (=> BL_0_then_7__A1 (=> BL_0_then_7__A2 BL_0_afterIf_6))))
(define-fun BL_0_else_8__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_8__A2 () Bool (= |BL_0_afterIf_6_source| 8))
(assert (= BL_0_else_8 (=> BL_0_else_8__A1 (=> BL_0_else_8__A2 BL_0_afterIf_6))))
(define-fun |_JML__tmp12| () Bool (= |_JML__tmp9| |_JML__tmp9|))
(define-fun |_JML__tmp13| () Bool (not |_JML__tmp12|))
(define-fun |_JML__tmp14| () Bool (= |_JML__tmp11| |_JML__tmp13|))
(define-fun |_JML__tmp16| () Bool (not |_JML__tmp11|))
(declare-fun java_lang_Double_isNaN_H2_4348 (Real ) Bool)
(define-fun BL_0_afterIf_6__A1 () Bool (= |_JML__tmp11| (java_lang_Double_isNaN_H2_4348 |_JML__tmp9|)))
(define-fun BL_0_afterIf_6__A2 () Bool |_JML__tmp14|)
(assert (= BL_0_afterIf_6 (=> BL_0_afterIf_6__A1 (=> BL_0_afterIf_6__A2 (and BL_0_then_10 BL_0_else_11)))))
(declare-fun |_JML__tmp18| () Bool)
(define-fun |_$CPRE__4_1| () Bool true)
(define-fun |_$CPRE__4| () Bool true)
(define-fun BL_0_then_10__A1 () Bool |_JML__tmp16|)
(define-fun BL_0_then_10__A2 () Bool (= |ASSERT_44| |_$CPRE__4|))
(assert (= BL_0_then_10 (=> BL_0_then_10__A1 (=> BL_0_then_10__A2 (and |ASSERT_44| (=> |ASSERT_44| (and BL_0_then_13 BL_0_else_14)))))))
(define-fun BL_0_then_13__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_13__A2 () Bool (= |BL_0_afterIf_12_source| 13))
(assert (= BL_0_then_13 (=> BL_0_then_13__A1 (=> BL_0_then_13__A2 BL_0_afterIf_12))))
(define-fun BL_0_else_14__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_14__A2 () Bool (= |BL_0_afterIf_12_source| 14))
(assert (= BL_0_else_14 (=> BL_0_else_14__A1 (=> BL_0_else_14__A2 BL_0_afterIf_12))))
(define-fun |_JML__tmp19| () Real |java.lang.Double_POSITIVE_INFINITY|)
(define-fun |_JML__tmp20| () Bool (= |_JML__tmp9| |java.lang.Double_POSITIVE_INFINITY|))
(declare-fun java_lang_Double_isInfinite_H2_4554 (Real ) Bool)
(define-fun BL_0_afterIf_12__A1 () Bool (= |_JML__tmp18| (java_lang_Double_isInfinite_H2_4554 |_JML__tmp9|)))
(assert (= BL_0_afterIf_12 (=> BL_0_afterIf_12__A1 (and BL_0_then_16 BL_0_else_17))))
(define-fun |_JML__tmp22| () Bool true)
(define-fun BL_0_then_16__A1 () Bool |_JML__tmp20|)
(define-fun BL_0_then_16__A2 () Bool (= |`conditionalResult_21_4470_0___8| true))
(define-fun BL_0_then_16__A3 () Bool (= |`conditionalResult_21_4470_4475___9| |`conditionalResult_21_4470_0___8|))
(define-fun BL_0_then_16__A4 () Bool (= |BL_0_afterIf_15_source| 16))
(assert (= BL_0_then_16 (=> BL_0_then_16__A1 (=> BL_0_then_16__A2 (=> BL_0_then_16__A3 (=> BL_0_then_16__A4 BL_0_afterIf_15))))))
(define-fun |_JML__tmp23| () Real |java.lang.Double_NEGATIVE_INFINITY|)
(define-fun |_JML__tmp24| () Bool (= |_JML__tmp9| |java.lang.Double_NEGATIVE_INFINITY|))
(define-fun BL_0_else_17__A1 () Bool (not |_JML__tmp20|))
(define-fun BL_0_else_17__A2 () Bool (= |`conditionalResult_21_4470_4475___9| |_JML__tmp24|))
(define-fun BL_0_else_17__A3 () Bool (= |BL_0_afterIf_15_source| 17))
(assert (= BL_0_else_17 (=> BL_0_else_17__A1 (=> BL_0_else_17__A2 (=> BL_0_else_17__A3 BL_0_afterIf_15)))))
(define-fun |_JML__tmp25| () Bool (= |_JML__tmp18| |`conditionalResult_21_4470_4475___9|))
(define-fun |_JML__tmp27| () Bool (not |_JML__tmp18|))
(define-fun BL_0_afterIf_15__A1 () Bool |_JML__tmp25|)
(define-fun BL_0_afterIf_15__A2 () Bool (= |`conditionalResult_17_4130_4133___10| |_JML__tmp27|))
(define-fun BL_0_afterIf_15__A3 () Bool (= |`conditionalResult_17_4130_0___11| |`conditionalResult_17_4130_4133___10|))
(define-fun BL_0_afterIf_15__A4 () Bool (= |BL_0_afterIf_9_source| 15))
(assert (= BL_0_afterIf_15 (=> BL_0_afterIf_15__A1 (=> BL_0_afterIf_15__A2 (=> BL_0_afterIf_15__A3 (=> BL_0_afterIf_15__A4 BL_0_afterIf_9))))))
(define-fun |_JML__tmp28| () Bool false)
(define-fun BL_0_else_11__A1 () Bool (not |_JML__tmp16|))
(define-fun BL_0_else_11__A2 () Bool (= |`conditionalResult_17_4130_0___11| false))
(define-fun BL_0_else_11__A3 () Bool (= |BL_0_afterIf_9_source| 11))
(assert (= BL_0_else_11 (=> BL_0_else_11__A1 (=> BL_0_else_11__A2 (=> BL_0_else_11__A3 BL_0_afterIf_9)))))
(define-fun |_JML__tmp29| () Bool (= |_JML__tmp10| |`conditionalResult_17_4130_0___11|))
(define-fun BL_0_afterIf_9__A1 () Bool |_JML__tmp29|)
(define-fun BL_0_afterIf_9__A2 () Bool (= |_JML__tmp8| |_JML__tmp10|))
(define-fun BL_0_afterIf_9__A3 () Bool (= |Pre_2_56_32___12| |_JML__tmp8|))
(define-fun BL_0_afterIf_9__A4 () Bool |Pre_2_56_32___12|)
(define-fun BL_0_afterIf_9__A5 () Bool (= |ASSERT_56| (distinct |__JML_AssumeCheck_| 1)))
(assert (= BL_0_afterIf_9 (=> BL_0_afterIf_9__A1 (=> BL_0_afterIf_9__A2 (=> BL_0_afterIf_9__A3 (=> BL_0_afterIf_9__A4 (=> BL_0_afterIf_9__A5 (and |ASSERT_56| (=> |ASSERT_56| BL_82_AfterLabel_18)))))))))
(define-fun |_JML__tmp31| () Real |a_98_98___5|)
(declare-fun |_JML__tmp32| () Real)
(declare-fun |_JML__tmp33| () Bool)
(declare-fun |_JML__tmp34| () Bool)
(define-fun |_$CPRE__6_1| () Bool true)
(define-fun |_$CPRE__6| () Bool true)
(define-fun BL_82_AfterLabel_18__A1 () Bool (= |ASSERT_57| |_$CPRE__6|))
(assert (= BL_82_AfterLabel_18 (=> BL_82_AfterLabel_18__A1 (and |ASSERT_57| (=> |ASSERT_57| (and BL_0_then_27 BL_0_else_28))))))
(define-fun BL_0_then_27__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_27__A2 () Bool (= |BL_0_afterIf_26_source| 27))
(assert (= BL_0_then_27 (=> BL_0_then_27__A1 (=> BL_0_then_27__A2 BL_0_afterIf_26))))
(define-fun BL_0_else_28__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_28__A2 () Bool (= |BL_0_afterIf_26_source| 28))
(assert (= BL_0_else_28 (=> BL_0_else_28__A1 (=> BL_0_else_28__A2 BL_0_afterIf_26))))
(define-fun |_JML__tmp35| () Bool (= |_JML__tmp31| |_JML__tmp31|))
(define-fun |_JML__tmp36| () Bool (not |_JML__tmp35|))
(define-fun |_JML__tmp37| () Bool (= |_JML__tmp34| |_JML__tmp36|))
(define-fun |_$CPRE__5_1_1| () Bool |_JML__tmp34|)
(define-fun |_$CPRE__5_1| () Bool |_JML__tmp33|)
(declare-fun |_JML__tmp39| () Bool)
(define-fun |_JML__tmp40| () Bool (= |_JML__tmp31| |java.lang.Double_POSITIVE_INFINITY|))
(define-fun |_$CPRE__5_2_1| () Bool |_JML__tmp40|)
(define-fun |_$CPRE__5_2| () Bool |_JML__tmp39|)
(declare-fun |_JML__tmp41| () Bool)
(define-fun |_JML__tmp42| () Bool (= |_JML__tmp31| |java.lang.Double_NEGATIVE_INFINITY|))
(define-fun |_$CPRE__5_3_1| () Bool |_JML__tmp42|)
(define-fun |_$CPRE__5_3| () Bool |_JML__tmp41|)
(declare-fun |_JML__tmp43| () Bool)
(declare-fun |_JML__tmp44| () Bool)
(define-fun |_$CPRE__7_1| () Bool true)
(define-fun |_$CPRE__7| () Bool true)
(define-fun |_$CPRE__5_4_1| () Bool |_JML__tmp44|)
(define-fun |_$CPRE__5_4| () Bool |_JML__tmp43|)
(declare-fun |_JML__tmp45| () Bool)
(declare-fun |_JML__tmp46| () Bool)
(define-fun |_$CPRE__8_1| () Bool true)
(define-fun |_$CPRE__8| () Bool true)
(define-fun |_$CPRE__5_5_1| () Bool |_JML__tmp46|)
(define-fun |_$CPRE__5_5| () Bool |_JML__tmp45|)
(declare-fun |_JML__tmp47| () Bool)
(define-fun REALLIT1 () Real 0.0)
(define-fun |_JML__tmp48| () Real REALLIT1)
(define-fun |_JML__tmp49| () Bool (> |_JML__tmp31| REALLIT1))
(define-fun |_$CPRE__5_6_1| () Bool |_JML__tmp49|)
(define-fun BL_0_afterIf_26__A1 () Bool (= |_JML__tmp34| (java_lang_Double_isNaN_H2_4348 |_JML__tmp31|)))
(define-fun BL_0_afterIf_26__A2 () Bool |_JML__tmp37|)
(define-fun BL_0_afterIf_26__A3 () Bool (= |_JML__tmp33| |_JML__tmp34|))
(define-fun BL_0_afterIf_26__A4 () Bool (= |_JML__tmp39| |_JML__tmp40|))
(define-fun BL_0_afterIf_26__A5 () Bool (= |_JML__tmp41| |_JML__tmp42|))
(define-fun BL_0_afterIf_26__A6 () Bool (= |ASSERT_69| |_$CPRE__7|))
(declare-fun java_lang_Math_isPositiveZero_39307 (Real ) Bool)
(define-fun BL_0_afterIf_26__A7 () Bool (= |_JML__tmp44| (java_lang_Math_isPositiveZero_39307 |_JML__tmp31|)))
(define-fun BL_0_afterIf_26__A8 () Bool (= |_JML__tmp43| |_JML__tmp44|))
(define-fun BL_0_afterIf_26__A9 () Bool (= |ASSERT_74| |_$CPRE__8|))
(declare-fun java_lang_Math_isNegativeZero_39452 (Real ) Bool)
(define-fun BL_0_afterIf_26__A10 () Bool (= |_JML__tmp46| (java_lang_Math_isNegativeZero_39452 |_JML__tmp31|)))
(define-fun BL_0_afterIf_26__A11 () Bool (= |_JML__tmp45| |_JML__tmp46|))
(assert (= BL_0_afterIf_26 (=> BL_0_afterIf_26__A1 (=> BL_0_afterIf_26__A2 (=> BL_0_afterIf_26__A3 (=> BL_0_afterIf_26__A4 (=> BL_0_afterIf_26__A5 (=> BL_0_afterIf_26__A6 (and |ASSERT_69| (=> |ASSERT_69| (=> BL_0_afterIf_26__A7 (=> BL_0_afterIf_26__A8 (=> BL_0_afterIf_26__A9 (and |ASSERT_74| (=> |ASSERT_74| (=> BL_0_afterIf_26__A10 (=> BL_0_afterIf_26__A11 (and BL_0_then_30 BL_0_else_31))))))))))))))))))
(define-fun |_JML__tmp51| () Bool (< |_JML__tmp31| |java.lang.Double_POSITIVE_INFINITY|))
(define-fun |_$CPRE__5_6_2| () Bool |_JML__tmp51|)
(define-fun BL_0_then_30__A1 () Bool |_JML__tmp49|)
(define-fun BL_0_then_30__A2 () Bool (= |`conditionalResult_50_9616_9621___14| |_JML__tmp51|))
(define-fun BL_0_then_30__A3 () Bool (= |`conditionalResult_50_9616_0___15| |`conditionalResult_50_9616_9621___14|))
(define-fun BL_0_then_30__A4 () Bool (= |BL_0_afterIf_29_source| 30))
(assert (= BL_0_then_30 (=> BL_0_then_30__A1 (=> BL_0_then_30__A2 (=> BL_0_then_30__A3 (=> BL_0_then_30__A4 BL_0_afterIf_29))))))
(define-fun |_JML__tmp52| () Bool false)
(define-fun BL_0_else_31__A1 () Bool (not |_JML__tmp49|))
(define-fun BL_0_else_31__A2 () Bool (= |`conditionalResult_50_9616_0___15| false))
(define-fun BL_0_else_31__A3 () Bool (= |BL_0_afterIf_29_source| 31))
(assert (= BL_0_else_31 (=> BL_0_else_31__A1 (=> BL_0_else_31__A2 (=> BL_0_else_31__A3 BL_0_afterIf_29)))))
(define-fun |_$CPRE__5_6| () Bool |_JML__tmp47|)
(define-fun |_$CPRE__5| () Bool (or (or (or (or (or |_JML__tmp33| |_JML__tmp39|) |_JML__tmp41|) |_JML__tmp43|) |_JML__tmp45|) |_JML__tmp47|))
(define-fun BL_0_afterIf_29__A1 () Bool (= |_JML__tmp47| |`conditionalResult_50_9616_0___15|))
(define-fun BL_0_afterIf_29__A2 () Bool (= |ASSERT_81| |_$CPRE__5|))
(assert (= BL_0_afterIf_29 (=> BL_0_afterIf_29__A1 (=> BL_0_afterIf_29__A2 (and |ASSERT_81| (=> |ASSERT_81| BL_133_AfterLabel_32))))))
(assert (= BL_133_AfterLabel_32 (and BL_0_then_34 BL_0_else_35)))
(define-fun BL_0_then_34__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_34__A2 () Bool (= |BL_0_afterIf_33_source| 34))
(assert (= BL_0_then_34 (=> BL_0_then_34__A1 (=> BL_0_then_34__A2 BL_0_afterIf_33))))
(define-fun BL_0_else_35__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_35__A2 () Bool (= |BL_0_afterIf_33_source| 35))
(assert (= BL_0_else_35 (=> BL_0_else_35__A1 (=> BL_0_else_35__A2 BL_0_afterIf_33))))
(define-fun BL_0_afterIf_33__A1 () Bool (= |`exceptionCall_133_133___16| NULL))
(declare-fun java_lang_Math_cbrt_H2_9774 (Real ) Real)
(define-fun BL_0_afterIf_33__A2 () Bool (= |_JML__tmp32| (java_lang_Math_cbrt_H2_9774 |_JML__tmp31|)))
(assert (= BL_0_afterIf_33 (=> BL_0_afterIf_33__A1 (=> BL_0_afterIf_33__A2 (and BL_0_then_37 BL_0_else_38)))))
(declare-fun |_JML__tmp54| () Bool)
(define-fun |_$CPRE__9_1| () Bool true)
(define-fun |_$CPRE__9| () Bool true)
(define-fun BL_0_then_37__A1 () Bool |_JML__tmp33|)
(define-fun BL_0_then_37__A2 () Bool (= |ASSERT_84| |_$CPRE__9|))
(assert (= BL_0_then_37 (=> BL_0_then_37__A1 (=> BL_0_then_37__A2 (and |ASSERT_84| (=> |ASSERT_84| (and BL_0_then_40 BL_0_else_41)))))))
(define-fun BL_0_then_40__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_40__A2 () Bool (= |BL_0_afterIf_39_source| 40))
(assert (= BL_0_then_40 (=> BL_0_then_40__A1 (=> BL_0_then_40__A2 BL_0_afterIf_39))))
(define-fun BL_0_else_41__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_41__A2 () Bool (= |BL_0_afterIf_39_source| 41))
(assert (= BL_0_else_41 (=> BL_0_else_41__A1 (=> BL_0_else_41__A2 BL_0_afterIf_39))))
(define-fun |_JML__tmp55| () Bool (= |_JML__tmp32| |_JML__tmp32|))
(define-fun |_JML__tmp56| () Bool (not |_JML__tmp55|))
(define-fun |_JML__tmp57| () Bool (= |_JML__tmp54| |_JML__tmp56|))
(define-fun BL_0_afterIf_39__A1 () Bool (= |_JML__tmp54| (java_lang_Double_isNaN_H2_4348 |_JML__tmp32|)))
(define-fun BL_0_afterIf_39__A2 () Bool |_JML__tmp57|)
(define-fun BL_0_afterIf_39__A3 () Bool |_JML__tmp54|)
(define-fun BL_0_afterIf_39__A4 () Bool (= |BL_0_afterIf_36_source| 39))
(assert (= BL_0_afterIf_39 (=> BL_0_afterIf_39__A1 (=> BL_0_afterIf_39__A2 (=> BL_0_afterIf_39__A3 (=> BL_0_afterIf_39__A4 BL_0_afterIf_36))))))
(define-fun BL_0_else_38__A1 () Bool (not |_JML__tmp33|))
(define-fun BL_0_else_38__A2 () Bool (= |BL_0_afterIf_36_source| 38))
(assert (= BL_0_else_38 (=> BL_0_else_38__A1 (=> BL_0_else_38__A2 BL_0_afterIf_36))))
(assert (= BL_0_afterIf_36 (and BL_0_then_43 BL_0_else_44)))
(define-fun |_JML__tmp60| () Bool (= |_JML__tmp32| |java.lang.Double_POSITIVE_INFINITY|))
(define-fun BL_0_then_43__A1 () Bool |_JML__tmp39|)
(define-fun BL_0_then_43__A2 () Bool |_JML__tmp60|)
(define-fun BL_0_then_43__A3 () Bool (= |BL_0_afterIf_42_source| 43))
(assert (= BL_0_then_43 (=> BL_0_then_43__A1 (=> BL_0_then_43__A2 (=> BL_0_then_43__A3 BL_0_afterIf_42)))))
(define-fun BL_0_else_44__A1 () Bool (not |_JML__tmp39|))
(define-fun BL_0_else_44__A2 () Bool (= |BL_0_afterIf_42_source| 44))
(assert (= BL_0_else_44 (=> BL_0_else_44__A1 (=> BL_0_else_44__A2 BL_0_afterIf_42))))
(assert (= BL_0_afterIf_42 (and BL_0_then_46 BL_0_else_47)))
(define-fun |_JML__tmp62| () Bool (= |_JML__tmp32| |java.lang.Double_NEGATIVE_INFINITY|))
(define-fun BL_0_then_46__A1 () Bool |_JML__tmp41|)
(define-fun BL_0_then_46__A2 () Bool |_JML__tmp62|)
(define-fun BL_0_then_46__A3 () Bool (= |BL_0_afterIf_45_source| 46))
(assert (= BL_0_then_46 (=> BL_0_then_46__A1 (=> BL_0_then_46__A2 (=> BL_0_then_46__A3 BL_0_afterIf_45)))))
(define-fun BL_0_else_47__A1 () Bool (not |_JML__tmp41|))
(define-fun BL_0_else_47__A2 () Bool (= |BL_0_afterIf_45_source| 47))
(assert (= BL_0_else_47 (=> BL_0_else_47__A1 (=> BL_0_else_47__A2 BL_0_afterIf_45))))
(assert (= BL_0_afterIf_45 (and BL_0_then_49 BL_0_else_50)))
(declare-fun |_JML__tmp64| () Bool)
(define-fun |_$CPRE__10_1| () Bool true)
(define-fun |_$CPRE__10| () Bool true)
(define-fun BL_0_then_49__A1 () Bool |_JML__tmp43|)
(define-fun BL_0_then_49__A2 () Bool (= |ASSERT_99| |_$CPRE__10|))
(define-fun BL_0_then_49__A3 () Bool (= |_JML__tmp64| (java_lang_Math_isPositiveZero_39307 |_JML__tmp32|)))
(define-fun BL_0_then_49__A4 () Bool |_JML__tmp64|)
(define-fun BL_0_then_49__A5 () Bool (= |BL_0_afterIf_48_source| 49))
(assert (= BL_0_then_49 (=> BL_0_then_49__A1 (=> BL_0_then_49__A2 (and |ASSERT_99| (=> |ASSERT_99| (=> BL_0_then_49__A3 (=> BL_0_then_49__A4 (=> BL_0_then_49__A5 BL_0_afterIf_48)))))))))
(define-fun BL_0_else_50__A1 () Bool (not |_JML__tmp43|))
(define-fun BL_0_else_50__A2 () Bool (= |BL_0_afterIf_48_source| 50))
(assert (= BL_0_else_50 (=> BL_0_else_50__A1 (=> BL_0_else_50__A2 BL_0_afterIf_48))))
(assert (= BL_0_afterIf_48 (and BL_0_then_52 BL_0_else_53)))
(declare-fun |_JML__tmp66| () Bool)
(define-fun |_$CPRE__11_1| () Bool true)
(define-fun |_$CPRE__11| () Bool true)
(define-fun BL_0_then_52__A1 () Bool |_JML__tmp45|)
(define-fun BL_0_then_52__A2 () Bool (= |ASSERT_105| |_$CPRE__11|))
(define-fun BL_0_then_52__A3 () Bool (= |_JML__tmp66| (java_lang_Math_isNegativeZero_39452 |_JML__tmp32|)))
(define-fun BL_0_then_52__A4 () Bool |_JML__tmp66|)
(define-fun BL_0_then_52__A5 () Bool (= |BL_0_afterIf_51_source| 52))
(assert (= BL_0_then_52 (=> BL_0_then_52__A1 (=> BL_0_then_52__A2 (and |ASSERT_105| (=> |ASSERT_105| (=> BL_0_then_52__A3 (=> BL_0_then_52__A4 (=> BL_0_then_52__A5 BL_0_afterIf_51)))))))))
(define-fun BL_0_else_53__A1 () Bool (not |_JML__tmp45|))
(define-fun BL_0_else_53__A2 () Bool (= |BL_0_afterIf_51_source| 53))
(assert (= BL_0_else_53 (=> BL_0_else_53__A1 (=> BL_0_else_53__A2 BL_0_afterIf_51))))
(assert (= BL_0_afterIf_51 (and BL_0_then_55 BL_0_else_56)))
(define-fun |_JML__tmp68| () Real (* |_JML__tmp32| |_JML__tmp32|))
(define-fun |_JML__tmp69| () Real (* |_JML__tmp68| |_JML__tmp32|))
(define-fun REALLIT2 () Real 3.0E-16)
(define-fun |_JML__tmp70| () Real REALLIT2)
(declare-fun |_JML__tmp71| () Bool)
(define-fun |_$CPRE__12_1| () Bool true)
(define-fun |_$CPRE__12| () Bool true)
(define-fun BL_0_then_55__A1 () Bool |_JML__tmp47|)
(define-fun BL_0_then_55__A2 () Bool (= |ASSERT_111| |_$CPRE__12|))
(declare-fun java_lang_Math_close_40527 (Real Real Real ) Bool)
(define-fun BL_0_then_55__A3 () Bool (= |_JML__tmp71| (java_lang_Math_close_40527 |_JML__tmp31| |_JML__tmp69| REALLIT2)))
(define-fun BL_0_then_55__A4 () Bool |_JML__tmp71|)
(define-fun BL_0_then_55__A5 () Bool (= |BL_0_afterIf_54_source| 55))
(assert (= BL_0_then_55 (=> BL_0_then_55__A1 (=> BL_0_then_55__A2 (and |ASSERT_111| (=> |ASSERT_111| (=> BL_0_then_55__A3 (=> BL_0_then_55__A4 (=> BL_0_then_55__A5 BL_0_afterIf_54)))))))))
(define-fun BL_0_else_56__A1 () Bool (not |_JML__tmp47|))
(define-fun BL_0_else_56__A2 () Bool (= |BL_0_afterIf_54_source| 56))
(assert (= BL_0_else_56 (=> BL_0_else_56__A1 (=> BL_0_else_56__A2 BL_0_afterIf_54))))
(define-fun |_JML__tmp73| () Real |result_115_115___17|)
(declare-fun |_JML__tmp74| () Bool)
(define-fun |_$CPRE__13_1| () Bool true)
(define-fun |_$CPRE__13| () Bool true)
(define-fun BL_0_afterIf_54__A1 () Bool (= |result_115_115___17| |_JML__tmp32|))
(define-fun BL_0_afterIf_54__A2 () Bool (= |ASSERT_118| |_$CPRE__13|))
(assert (= BL_0_afterIf_54 (=> BL_0_afterIf_54__A1 (=> BL_0_afterIf_54__A2 (and |ASSERT_118| (=> |ASSERT_118| (and BL_0_then_58 BL_0_else_59)))))))
(define-fun BL_0_then_58__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_58__A2 () Bool (= |BL_0_afterIf_57_source| 58))
(assert (= BL_0_then_58 (=> BL_0_then_58__A1 (=> BL_0_then_58__A2 BL_0_afterIf_57))))
(define-fun BL_0_else_59__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_59__A2 () Bool (= |BL_0_afterIf_57_source| 59))
(assert (= BL_0_else_59 (=> BL_0_else_59__A1 (=> BL_0_else_59__A2 BL_0_afterIf_57))))
(declare-fun |_JML__tmp75| () Bool)
(define-fun |_$CPRE__14_1| () Bool true)
(define-fun |_$CPRE__14| () Bool true)
(define-fun BL_0_afterIf_57__A1 () Bool (= |_JML__tmp74| (java_lang_Double_isFinite_H2_4196 |_JML__tmp73|)))
(define-fun BL_0_afterIf_57__A2 () Bool (= |ASSERT_121| |_$CPRE__14|))
(assert (= BL_0_afterIf_57 (=> BL_0_afterIf_57__A1 (=> BL_0_afterIf_57__A2 (and |ASSERT_121| (=> |ASSERT_121| (and BL_0_then_61 BL_0_else_62)))))))
(define-fun BL_0_then_61__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_61__A2 () Bool (= |BL_0_afterIf_60_source| 61))
(assert (= BL_0_then_61 (=> BL_0_then_61__A1 (=> BL_0_then_61__A2 BL_0_afterIf_60))))
(define-fun BL_0_else_62__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_62__A2 () Bool (= |BL_0_afterIf_60_source| 62))
(assert (= BL_0_else_62 (=> BL_0_else_62__A1 (=> BL_0_else_62__A2 BL_0_afterIf_60))))
(define-fun |_JML__tmp76| () Bool (= |_JML__tmp73| |_JML__tmp73|))
(define-fun |_JML__tmp77| () Bool (not |_JML__tmp76|))
(define-fun |_JML__tmp78| () Bool (= |_JML__tmp75| |_JML__tmp77|))
(define-fun |_JML__tmp80| () Bool (not |_JML__tmp75|))
(define-fun BL_0_afterIf_60__A1 () Bool (= |_JML__tmp75| (java_lang_Double_isNaN_H2_4348 |_JML__tmp73|)))
(define-fun BL_0_afterIf_60__A2 () Bool |_JML__tmp78|)
(assert (= BL_0_afterIf_60 (=> BL_0_afterIf_60__A1 (=> BL_0_afterIf_60__A2 (and BL_0_then_64 BL_0_else_65)))))
(declare-fun |_JML__tmp82| () Bool)
(define-fun |_$CPRE__15_1| () Bool true)
(define-fun |_$CPRE__15| () Bool true)
(define-fun BL_0_then_64__A1 () Bool |_JML__tmp80|)
(define-fun BL_0_then_64__A2 () Bool (= |ASSERT_127| |_$CPRE__15|))
(assert (= BL_0_then_64 (=> BL_0_then_64__A1 (=> BL_0_then_64__A2 (and |ASSERT_127| (=> |ASSERT_127| (and BL_0_then_67 BL_0_else_68)))))))
(define-fun BL_0_then_67__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_67__A2 () Bool (= |BL_0_afterIf_66_source| 67))
(assert (= BL_0_then_67 (=> BL_0_then_67__A1 (=> BL_0_then_67__A2 BL_0_afterIf_66))))
(define-fun BL_0_else_68__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_68__A2 () Bool (= |BL_0_afterIf_66_source| 68))
(assert (= BL_0_else_68 (=> BL_0_else_68__A1 (=> BL_0_else_68__A2 BL_0_afterIf_66))))
(define-fun |_JML__tmp83| () Real |java.lang.Double_POSITIVE_INFINITY|)
(define-fun |_JML__tmp84| () Bool (= |_JML__tmp73| |java.lang.Double_POSITIVE_INFINITY|))
(define-fun BL_0_afterIf_66__A1 () Bool (= |_JML__tmp82| (java_lang_Double_isInfinite_H2_4554 |_JML__tmp73|)))
(assert (= BL_0_afterIf_66 (=> BL_0_afterIf_66__A1 (and BL_0_then_70 BL_0_else_71))))
(define-fun |_JML__tmp86| () Bool true)
(define-fun BL_0_then_70__A1 () Bool |_JML__tmp84|)
(define-fun BL_0_then_70__A2 () Bool (= |`conditionalResult_85_4470_0___20| true))
(define-fun BL_0_then_70__A3 () Bool (= |`conditionalResult_85_4470_4475___21| |`conditionalResult_85_4470_0___20|))
(define-fun BL_0_then_70__A4 () Bool (= |BL_0_afterIf_69_source| 70))
(assert (= BL_0_then_70 (=> BL_0_then_70__A1 (=> BL_0_then_70__A2 (=> BL_0_then_70__A3 (=> BL_0_then_70__A4 BL_0_afterIf_69))))))
(define-fun |_JML__tmp87| () Real |java.lang.Double_NEGATIVE_INFINITY|)
(define-fun |_JML__tmp88| () Bool (= |_JML__tmp73| |java.lang.Double_NEGATIVE_INFINITY|))
(define-fun BL_0_else_71__A1 () Bool (not |_JML__tmp84|))
(define-fun BL_0_else_71__A2 () Bool (= |`conditionalResult_85_4470_4475___21| |_JML__tmp88|))
(define-fun BL_0_else_71__A3 () Bool (= |BL_0_afterIf_69_source| 71))
(assert (= BL_0_else_71 (=> BL_0_else_71__A1 (=> BL_0_else_71__A2 (=> BL_0_else_71__A3 BL_0_afterIf_69)))))
(define-fun |_JML__tmp89| () Bool (= |_JML__tmp82| |`conditionalResult_85_4470_4475___21|))
(define-fun |_JML__tmp91| () Bool (not |_JML__tmp82|))
(define-fun BL_0_afterIf_69__A1 () Bool |_JML__tmp89|)
(define-fun BL_0_afterIf_69__A2 () Bool (= |`conditionalResult_81_4130_4133___22| |_JML__tmp91|))
(define-fun BL_0_afterIf_69__A3 () Bool (= |`conditionalResult_81_4130_0___23| |`conditionalResult_81_4130_4133___22|))
(define-fun BL_0_afterIf_69__A4 () Bool (= |BL_0_afterIf_63_source| 69))
(assert (= BL_0_afterIf_69 (=> BL_0_afterIf_69__A1 (=> BL_0_afterIf_69__A2 (=> BL_0_afterIf_69__A3 (=> BL_0_afterIf_69__A4 BL_0_afterIf_63))))))
(define-fun |_JML__tmp92| () Bool false)
(define-fun BL_0_else_65__A1 () Bool (not |_JML__tmp80|))
(define-fun BL_0_else_65__A2 () Bool (= |`conditionalResult_81_4130_0___23| false))
(define-fun BL_0_else_65__A3 () Bool (= |BL_0_afterIf_63_source| 65))
(assert (= BL_0_else_65 (=> BL_0_else_65__A1 (=> BL_0_else_65__A2 (=> BL_0_else_65__A3 BL_0_afterIf_63)))))
(define-fun |_JML__tmp93| () Bool (= |_JML__tmp74| |`conditionalResult_81_4130_0___23|))
(define-fun |_JML__tmp95| () Real |a_98_98___5|)
(define-fun |_JML__tmp96| () Real (* |result_115_115___17| |result_115_115___17|))
(define-fun |_JML__tmp97| () Real (* |_JML__tmp96| |result_115_115___17|))
(define-fun |_JML__tmp98| () Real REALLIT2)
(declare-fun |_JML__tmp99| () Bool)
(define-fun |_$CPRE__16_1| () Bool true)
(define-fun |_$CPRE__16| () Bool true)
(define-fun BL_0_afterIf_63__A1 () Bool |_JML__tmp93|)
(define-fun BL_0_afterIf_63__A2 () Bool (= |ASSERT_136| (distinct |__JML_AssumeCheck_| 2)))
(define-fun BL_0_afterIf_63__A3 () Bool (= |ASSERT_137| |_JML__tmp74|))
(define-fun BL_0_afterIf_63__A4 () Bool (= |ASSERT_138| |_$CPRE__16|))
(define-fun BL_0_afterIf_63__A5 () Bool (= |_JML__tmp99| (java_lang_Math_close_40527 |_JML__tmp95| |_JML__tmp97| REALLIT2)))
(define-fun BL_0_afterIf_63__A6 () Bool (= |ASSERT_141| (distinct |__JML_AssumeCheck_| 3)))
(define-fun BL_0_afterIf_63__A7 () Bool (= |ASSERT_142| |_JML__tmp99|))
(assert (= BL_0_afterIf_63 (=> BL_0_afterIf_63__A1 (=> BL_0_afterIf_63__A2 (and |ASSERT_136| (=> |ASSERT_136| (=> BL_0_afterIf_63__A3 (and |ASSERT_137| (=> |ASSERT_137| (=> BL_0_afterIf_63__A4 (and |ASSERT_138| (=> |ASSERT_138| (=> BL_0_afterIf_63__A5 (=> BL_0_afterIf_63__A6 (and |ASSERT_141| (=> |ASSERT_141| (=> BL_0_afterIf_63__A7 (and |ASSERT_142| (=> |ASSERT_142| BL_82tryTarget_20)))))))))))))))))))
(assert (= BL_82tryTarget_20 (and BL_82noException_22 BL_82nocatch_23)))
(define-fun BL_82noException_22__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_82noException_22__A2 () Bool (= |BL_82_finally_21_source| 22))
(assert (= BL_82noException_22 (=> BL_82noException_22__A1 (=> BL_82noException_22__A2 BL_82_finally_21))))
(define-fun BL_82nocatch_23__A1 () Bool (distinct |`exception_82_82___3| NULL))
(define-fun BL_82nocatch_23__A2 () Bool (= |BL_82_finally_21_source| 23))
(assert (= BL_82nocatch_23 (=> BL_82nocatch_23__A1 (=> BL_82nocatch_23__A2 BL_82_finally_21))))
(define-fun BL_82_finally_21__A1 () Bool (= |__JMLsavedException_82_82_82___24| |`exception_82_82___3|))
(define-fun BL_82_finally_21__A2 () Bool (= |__JMLsavedTermination_82_82_82___25| |`terminationPosition_82_82___4|))
(define-fun BL_82_finally_21__A3 () Bool (= |ASSERT_143| (distinct |__JML_AssumeCheck_| 4)))
(assert (= BL_82_finally_21 (=> BL_82_finally_21__A1 (=> BL_82_finally_21__A2 (=> BL_82_finally_21__A3 (and |ASSERT_143| (=> |ASSERT_143| (and BL_0_then_73 BL_0_else_74))))))))
(define-fun BL_0_then_73__A1 () Bool (= |`exception_82_82___3| NULL))
(define-fun BL_0_then_73__A2 () Bool (= |BL_0_afterIf_72_source| 73))
(assert (= BL_0_then_73 (=> BL_0_then_73__A1 (=> BL_0_then_73__A2 BL_0_afterIf_72))))
(define-fun BL_0_else_74__A1 () Bool (not (= |`exception_82_82___3| NULL)))
(define-fun BL_0_else_74__A2 () Bool (= |ASSERT_144| (or (not (and (distinct |`exception_82_82___3| NULL) (javaSubType (javaTypeOf |`exception_82_82___3|) T_java_lang_Exception))) (or (not |Pre_2_56_32___12|) (or false (and (distinct |`exception_82_82___3| NULL) (javaSubType (javaTypeOf |`exception_82_82___3|) T_java_lang_RuntimeException)))))))
(define-fun BL_0_else_74__A3 () Bool (= |BL_0_afterIf_72_source| 74))
(assert (= BL_0_else_74 (=> BL_0_else_74__A1 (=> BL_0_else_74__A2 (and |ASSERT_144| (=> |ASSERT_144| (=> BL_0_else_74__A3 BL_0_afterIf_72)))))))
(define-fun BL_0_afterIf_72__A1 () Bool (= |`exception_82_82___26| |__JMLsavedException_82_82_82___24|))
(define-fun BL_0_afterIf_72__A2 () Bool (= |`terminationPosition_82_82___27| |__JMLsavedTermination_82_82_82___25|))
(assert (= BL_0_afterIf_72 (=> BL_0_afterIf_72__A1 (=> BL_0_afterIf_72__A2 (and BL_82finallyNormal_24 BL_82finallyExit_25)))))
(define-fun BL_82finallyNormal_24__A1 () Bool (= |`terminationPosition_82_82___27| 0))
(define-fun BL_82finallyNormal_24__A2 () Bool (= |BL_82_AfterTry_19_source| 24))
(assert (= BL_82finallyNormal_24 (=> BL_82finallyNormal_24__A1 (=> BL_82finallyNormal_24__A2 BL_82_AfterTry_19))))
(define-fun BL_82finallyExit_25__A1 () Bool (distinct |`terminationPosition_82_82___27| 0))
(define-fun BL_82finallyExit_25__A2 () Bool (= |BL_82_AfterTry_19_source| 25))
(assert (= BL_82finallyExit_25 (=> BL_82finallyExit_25__A1 (=> BL_82finallyExit_25__A2 BL_82_AfterTry_19))))
(assert (= BL_82_AfterTry_19 true))
(assert (not BL_82Start_1))
(push 1)
(assert (= __JML_AssumeCheck_ 0))
(push 1)
(check-sat)
